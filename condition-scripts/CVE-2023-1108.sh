#!/bin/bash
#
# Scan for CVE-2023-1108 susceptibility
# (Latest javas, with 7.4.9 or earlier and an HTTPS listener)
#
# Usage: sh ./CVE-2023-1108.sh <SERVER_LOG>

TRIM_FILE=$1

if [ `grep -E "java.runtime.version = 17\.0\.[6-9]|java.runtime.version = 17\.0\.[1-9][0-9]|java.runtime.version = 11\.0\.1[8-9]|java.runtime.version = 11\.0\.[2-9][0-9]|java.runtime.version = 11\.0\.[1-9][0-9][0-9]|java.runtime.version = 1\.8\.0_3[6-9]|java.runtime.version = 1\.8\.0_[4-9][0-9][0-9]" $TRIM_FILE | wc -l` -gt 0  ]; then
    if [ `grep -E "WFLYSRV0049|WFLYSRV0050" $TRIM_FILE | grep -E -v "EAP 7\.4\.[1-9][0-9]" | grep -v "EAP 8" | wc -l` -gt 0  ]; then
        if [ `grep -E "WFLYUT000[6-8]" $TRIM_FILE | grep "HTTPS" | wc -l` -gt 0  ]; then
                
            i=$((i+1))

            echo -en "${GREEN}"
            {
            echo "    * EAP + JDK combinations are susceptible to CVE-2023-1108"
            echo "        * Suggested KCS: https://access.redhat.com/solutions/6997164"
            echo "        * Suggested comment: "
            echo
            } | tee -a $ERROR_DEST

            echo -en "${YELLOW}"
            {
echo "I see are you using a latest JDK with an outdated JBoss EAP version and an HTTPS listener and this combination is susceptible to CVE-2023-1108 (https://access.redhat.com/solutions/6997164):"
echo
grep "java.runtime.version" $TRIM_FILE | head -n 1
grep -E "WFLYSRV0049|WFLYSRV0050" $TRIM_FILE | head -n 1
grep "WFLYUT000[6-8]" $TRIM_FILE | grep "HTTPS" | head -n 1
echo
echo "EAP 7/Undertow has a loop that can run indefinitely if the java SSLEngine returns a CLOSE/NEED_WRAP state for the handshake. That was not really ever seen with prior java versions. But java 1.8.0_361+ and 11.0.18+ and 17.0.6+ include changes that increase the possibility of SSLEngineResult.writeRecord returning a CLOSED/NEED_WRAP state for a client abruptly terminating an SSL handshake:

https://bugs.openjdk.org/browse/JDK-8273553

Undertow does not currently handle this state and falls into a busy loop here to consume high CPU.  You should downgrade java to 1.8.0_351 / 11.0.17 / 17.0.5 or earlier and only use these as a workaround. Then upgrade to the latest EAP 7.4.10+ updates before upgrading the JDK again.  The latest 7.4.15 update is recommended:

7.4.15: https://access.redhat.com/jbossnetwork/restricted/softwareDetail.html?softwareId=106330"

            } | tee -a $ERROR_DEST
        fi
    fi
fi

